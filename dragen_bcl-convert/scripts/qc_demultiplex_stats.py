#!/usr/bin/env python3
"""
Control the Quality of DRAGEN BCL-convert. Check the yield per index and 
reports several statistics from `Reports/Demultiplex_Stats.csv` generated by
`dragen --bcl-conversion-only`.

USAGE: qc_demultiplex_stats.py --help # And the rest is handled by `argparse`
"""

import sys
import os
import argparse
import logging
import pandas as pd
import plotly
import plotly.graph_objects as go
import seaborn as sns
import matplotlib.pyplot as plt


__version__ = "0.1"


def parse_args():
    """
    Parse command-line options
    """
    parser = argparse.ArgumentParser(description="Quality Control of BCL-convert's Demultiplex_Stats")
    parser.add_argument('--file', '-f', nargs='?', default='Demultiplex_Stats.csv', 
                        help="Dragen BCL-convert demultiplexing report. Default='Demultiplex_Stats.csv'")
    parser.add_argument('--threshold', '-t', default=600_000_000,
                        help="Minimum threshold value for number of counts. Default='6000_000_000'")
    parser.add_argument('--logging-level', '-l', dest='level', default='info',
                        help="Logging level (str), can be 'debug', 'info', 'warning'. Default='info'")
    return parser.parse_args()


def configure_logging(level):
    """
    Set logging level, based on the level names of the `logging` module.
    - level (str): 'debug', 'info' or 'warning'
    """
    if level == 'debug':
        level_name = logging.DEBUG
    elif level == 'info':
        level_name = logging.INFO
    else:
        level_name = logging.WARNING
    logging.basicConfig(level=level_name, 
                        format='[%(asctime)s] %(levelname)s: %(message)s', 
                        datefmt='%Y-%m-%d@%H:%M:%S')


def plot_plotly_bar(df, threshold, outfile='demux_reads_per_sample-bar.html'):
    """
    Plot bar chart as a PNG file using Plotly
    - `df`: Two-column Pandas DataFrame ['SampleID', '# Reads']
    - `threshold`: value to mark as threshold. Default=600,000,000
    - `outfile`  : Name of output file. Default='demux_reads_per_sample-bar.html'
    - Returns: 0
    """
    df.columns = ['SampleID', '# Reads']
    fig = go.Figure([go.Bar(x=df['SampleID'], y=df['# Reads'])])
    fig.update_layout(title={'text': 'Number of reads per SampleID', 'x': 0.5, 'xanchor': 'center'},
                      xaxis_title='SampleID',
                      yaxis_title='Number of Reads')
    bar_colors = ['red' if val < threshold else 'orange' for val in df['# Reads']]
    fig.update_traces(marker_color=bar_colors, 
                      marker_line_color='rgb(8,48,107)',
                      marker_line_width=1.5,
                      opacity=0.6)
    fig.add_hline(y=threshold, line=dict(color="dark grey", width=1, dash="dash"))
    # fig.write_image('demux_reads_per_sample-bar.png') # requires kaleido which depends on Google Chrome
    plotly.offline.plot(fig, filename=outfile)
    return 0


def plot_seaborn_bar(df, threshold, outfile='demux_reads_per_sample-bar.png'):
    """
    Plot bar chart as a PNG file using Seaborn.
    - `df`: Two-column Pandas DataFrame ['SampleID', '# Reads']
    - `threshold`: value to mark as threshold. Default=600,000,000
    - `outfile`  : Name of output file. Default='demux_reads_per_sample-bar.png'
    - Returns: 0
    """
    df.columns = ['SampleID', '# Reads']
    bar_colors = ['red' if val < 600_000_000 else 'orange' for val in df['# Reads']]
    plt.figure(figsize=(14, 6))
    sns.barplot(data=df, x='SampleID', y='# Reads', palette=bar_colors, edgecolor='navy', alpha=0.6)
    plt.axhline(threshold, color='grey', linestyle='dashed', linewidth=1)
    plt.title('Number of reads per SampleID', fontsize=16)
    plt.xlabel('SampleID')
    plt.ylabel('Number of Reads')
    plt.xticks(rotation=90)
    plt.tight_layout()
    plt.savefig(outfile)
    return 0


def plot_ascii_bar(data, threshold):
    """
    Plot bar chart of `dataframe` using ASCII art.
    Code and text  by Alex Chan from [Drawing ASCII bar charts]
    (https://alexwlchan.net/2018/ascii-bar-charts/)
    - `data` : List of tuples [('Labels', 'Counts'), ('Labels', 'Counts'),...]
    - Returns: (str) ASCII art bar plot
    """
    RED   = "\033[31m"
    RESET = "\033[0m"
    bar_plot_str = ''
    max_value = max(count for _, count in data)
    increment = max_value / 25
    longest_label_length = max(len(label) for label, _ in data)

    for label, count in data:
        # ASCII block elements are chunks of 8: work out how many fractions
        # of 8 we need https://en.wikipedia.org/wiki/Block_Elements
        #
        bar_chunks, remainder = divmod(int(count * 8 / increment), 8)

        # First draw the full width chunks
        #
        bar = '█' * bar_chunks

        # Then add the fractional part. The Unicode code points for block 
        # elements are 8/8, 7/8, 6/8, ... , so we need to work backwards.
        #
        if remainder > 0:
            bar += chr(ord('█') + (8 - remainder))

        # If the bar is empty, add a left one-eighth block
        #
        bar = bar or  '▏'
        if count < threshold:
            bar_plot_str += f"{RED}{label.rjust(longest_label_length)} ▏ {count:#4d} {bar}{RESET}\n"
        else:
            bar_plot_str += f"{label.rjust(longest_label_length)} ▏ {count:#4d} {bar}\n"

    return bar_plot_str


def main():
    """
    Main function
    """
    args = parse_args()
    configure_logging(args.level)
    logging.info(f"{__file__} {vars(args)}")

    df_demux_stats0 = pd.read_csv(args.file)
    df_demux_stats0['SampleID'] = df_demux_stats0['SampleID'].astype(str)
    df_demux_stats = df_demux_stats0.groupby('SampleID').sum('# Reads').reset_index()[['SampleID', '# Reads', '% Reads']]
    df_demux_stats['Mean % Perfect Index Reads'] = df_demux_stats0.groupby('SampleID').mean('% Perfect Index Reads').reset_index()['% Perfect Index Reads']

    # Print bar charts of read counts per sample to an HTML file and STDOUT
    # PNG output to PNG using Plotly has a dependency on Google Chrome!
    # TODO: use Seaborn instead of plotly?
    #
    logging.info(f"Creating bar charts")
    workdir = os.path.dirname(args.file)
    print(workdir)
    os.chdir(workdir)
    plot_plotly_bar(df_demux_stats[['SampleID', '# Reads']], threshold=args.threshold)
    plot_seaborn_bar(df_demux_stats[['SampleID', '# Reads']], threshold=args.threshold)


    logging.info(f"Distribution of the number of reads per sample\n")
    data = [] # Create list of tuples for `plot_ascii_bar(list_oftuples)`
    for _, row in df_demux_stats.iterrows():
        data.append((row['SampleID'], row['# Reads']))
    print(plot_ascii_bar(data, threshold=args.threshold) + "\n")

    # Get the samples that have counts below the threshold value
    #
    logging.info(f"Samples below the threshold value of {args.threshold} reads")
    logging.info(df_demux_stats[df_demux_stats['# Reads'] < args.threshold])


if __name__ == '__main__':
    sys.exit(main())
